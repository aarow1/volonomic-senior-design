TOPOLOGY SELECTION README
These files aim to maximize the minimum wrench ‘x’  for a unidirectional 7 rotor ariel vehicle.
This is done by solving Ax = b where:
A represents the position/moment matrix [6x7]
x is the forces exerted by the motors [7x1]
b is the desired wrench output [6x1]

*denotes use with most updated solving method

—runSolvers— 
Scripts that integrate functions

*runSolver_hover_torque.m
	analyzes nstep batches of size solver_step A matrices to maximize the minimum wrench 	for A matrices that are able to satisfy a given hover force and torque.
	displays the current best A matrix and min_w at the end of each batch
	for A generation can chose A_gen_rand, A_gen_halton, or A_gen_unique
	parameters: 
		b_step, hover_force, hover_torque
		A_gen, A_step
		solver_step, nstep, mod split

runSolver_files.m
	analyzes A matrices that are stored as .mat files in ’01-INPUT’. Moves analyzed files to ’02-	OUTPUT’.
	displays the current best A matrix and min_w at the end of each file
	for A generation can chose A_gen_rand, A_gen_halton, or A_gen_unique
	parameters: 
		b_step
		solver_step, nstep, mod split

runSolver.m
	analyzes nstep batches of size solver_step A matrices to maximize the minimum wrench.
	A matrices are generated in A_gen_unique
	parameters:
		b_step, theta_step, thetasDone
		solver_step, nstep, mod split	

runSolver_rand.m
	analyzes nstep batches of size solver_step A matrices to maximize the minimum wrench.
	A matrices are generated using A_gen_rand
	parameters:
		b_step, theta_step
		solver_step, nstep, mod split

—A generation— 
generate A matrices 

Random generators

*A = A_gen_halton(N,~)
	uses a scrambled Halton series to generate N 6x7 matrices 
*A = A_gen_rand(N,n_step)
	uses pseudorandom integers from a uniform discrete distribution to generate N 6x7 matrices 	using a rotor angle step size of theta_step 

Brute force generators 

A = A_specific(thetas)
	generates one A matrix given 7 thetas
*A = A_gen_unique(~,theta_step)
	generates all unique A matrices for a given rotor angle step size of theta_step
	**where unique represents unique configurations of the 5 rotors 
A_gen
	script that generates all possible A matrices for a step size. 
	don’t use this 

Supporting functions
theta_gen_unique.m [supports brute force generators]
store_A.m [post processing for brute force generators]
Rot3D.m
Trans3D.m

—b generation— 
generate b matricies

*b = b_gen_hover_torque(theta_step, force_req, torque_req)
	generates all N unique wrenches that produce the given force_req and torque_req that span a 	unit 6-sphere using a step size of theta_step
	output is a 6xN matrix
b = b_gen3(theta_step)
	generates all N unique unit wrenches that span a span a unit sphere using a step size of 	theta_step
	output is a 3xN matrix
b = b_gen6(theta_step)
	generates all N unique unit wrenches that span a span a unit 6-sphere using a step size of 	theta_step
	output is a 6xN matrix
*b = b_gen3_w(step)
	essentially the same thing as b_gen3
	generates all N unique unit wrenches that span a span a unit sphere using a step size of 	theta_step
	output is a 3xN matrix

—w solvers— 
solve Ax = b

*min_w = check_A(A,b_statisfy,b_maximize,current_min)
	uses a pseudo inverse to solve Ax = b for one A and a 6xN matrix of bs. 
	returns 0 if the A matrix is invalid (i.e. is unable to solve for ‘x’ given a ‘b’), is unable to satisfy 
	the force/torques required in b_statisfy
	returns the norm of the minimum wrench if it is greater than the current_min

min_w = notQuadProg(A,b,current_min)
	uses a pseudo inverse to solve Ax = b for one A and a 6xN matrix of bs. 
	returns 0 if the A matrix is invalid (i.e. is unable to solve for ‘x’ given a ‘b’)
	returns the norm of the minimum wrench if it is greater than the current_min

min_w = w_solver(A,b,current_min)
	uses quadProg to solve Ax = b for one A and a 6xN matrix of bs. 
	returns 0 if the A matrix is invalid (i.e. is unable to solve for ‘x’ given a ‘b’)
	returns the norm of the minimum wrench if it is greater than the current_min
	
Supporting functions
matmult3d.m [supports w_solver]

